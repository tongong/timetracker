#!/usr/bin/env python3
import os
from datetime import datetime, timedelta
from math import floor
import subprocess

#   HELPER FUNCTIONS   #######################################################
def filelocation():
    if (os.getenv("XDG_DATA_HOME")):
        return os.getenv("XDG_DATA_HOME") + "/timetracker/data"
    else:
        return os.getenv("HOME") + "/.local/share/timetracker/data"

def timestring(secs):
    secs /= 60
    if (secs >= 60):
        return str(floor(secs / 60)) + "h" + str(floor(secs % 60)).zfill(2) + \
                "m"
    else:
        return str(floor(secs % 60)) + "m"

# yellow and bold
def printHeading(text):
    print("\033[33m\033[1m" + text + "\033[0m")

# example: data = [["firefox", 75], ["vim", 250], ...]
def printGraph(data):
    # replace name with name and time in correct alignment
    # 15 is enough space https://stackoverflow.com/questions/23534263/what-is-the-maximum-allowed-limit-on-the-length-of-a-process-name
    for line in data:
        line[0] = line[0].ljust(16, " ") + timestring(line[1]).rjust(5, " ")

    width = 50;
    # scale numbers on width
    maximum = 0;
    for line in data:
        if (line[1] > maximum): maximum = line[1]
    for line in data:
        line[1] = round(line[1] / maximum * 50)

    # print the graph
    for line in data:
        bar = ""
        if (line[1] == 0): bar = "▏"
        else: bar = "▇" * line[1]

        print(line[0] + " " + bar)


#   READ AND PARSE FILE   ####################################################
# does not handle errors
datafile = open(filelocation(), "r")

# parse input file
days = {}
programs = []
for line in datafile:
    parts = line.split(",");
    datestring = datetime.fromtimestamp(int(parts[0])).strftime("%Y-%m-%d")
    if datestring not in days:
        days[datestring] = {}
    dayRef = days[datestring]

    for part2 in parts[1:]:
        # print(part2)
        program = part2.split(":")[0]
        ptime = int(part2.split(":")[1])
        if program not in programs:
            programs.append(program)
        if program in dayRef:
            dayRef[program] += ptime
        else:
            dayRef[program] = ptime


#   PRINT GRAPHS   ###########################################################
# past week
printHeading("# past week")
tgIn = [] # graph input
for i in range(7):
    day = (datetime.today() + timedelta(days=i-6)).strftime("%Y-%m-%d")
    daySum = 0
    if day in days:
        for program in days[day]:
            if program != "slock" and program != "standby":
                daySum += days[day][program]
    tgIn.append([day, daySum])
printGraph(tgIn)

# today
today = datetime.today().strftime("%Y-%m-%d")
if today in days:
    print()
    printHeading("# today")
    tgIn = [] # graph input
    for program in sorted(days[today], key=lambda x: days[today][x],
            reverse=True):
        if days[today][program] >= 60:
            tgIn.append([program, days[today][program]])
    printGraph(tgIn)

# average
print()
printHeading("# average")
# get total number of days
dayNum = (datetime.today() - \
        datetime.strptime(list(days.keys())[0], "%Y-%m-%d")).days + 1
tgIn = [] # graph input
for program in programs:
    ptime = 0
    for day in days:
        for p in days[day]:
            if p == program:
                ptime += days[day][program] / dayNum
    if ptime >= 60:
        tgIn.append([program, ptime]);
tgIn = sorted(tgIn, key=lambda x: x[1], reverse=True)
printGraph(tgIn)
