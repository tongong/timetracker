#!/usr/bin/env python3
import os
from datetime import datetime, timedelta
from math import floor
import subprocess

# helper functions
def filelocation():
    if (os.getenv("XDG_DATA_HOME")):
        return os.getenv("XDG_DATA_HOME") + "/timetracker/data"
    else:
        return os.getenv("HOME") + "/.local/share/timetracker/data"

def timestring(secs):
    secs /= 60
    if (secs >= 60):
        return str(floor(secs / 60)) + "h" + str(floor(secs % 60)).zfill(2) + \
                "m"
    else:
        return str(floor(secs % 60)) + "m"

# command      -> array of args
# inp (=stdin) -> string
# returns stdout as string
def runExternal(command, inp):
    proc = subprocess.Popen(command, stdin=subprocess.PIPE,
            stdout=subprocess.PIPE)
    proc.stdin.write(inp.encode("utf-8"))
    proc.stdin.close()

    while proc.returncode is None:
        proc.poll()

    return proc.stdout.read().decode("utf-8")

# yellow and bold
def printHeading(text):
    print("\033[33m\033[1m" + text + "\033[0m")



# does not handle errors
datafile = open(filelocation(), "r")

# parse input file
days = {}
programs = []
for line in datafile:
    parts = line.split(",");
    if datetime.fromtimestamp(int(parts[0])).strftime("%Y-%m-%d") not in days:
        days[datetime.fromtimestamp(int(parts[0])).strftime("%Y-%m-%d")] = {}
    dayRef = days[datetime.fromtimestamp(int(parts[0])).strftime("%Y-%m-%d")]

    for part2 in parts[1:]:
        # print(part2)
        program = part2.split(":")[0]
        ptime = int(part2.split(":")[1])
        if program not in programs:
            programs.append(program)
        if program in dayRef:
            dayRef[program] += ptime
        else:
            dayRef[program] = ptime

# graphs
printHeading("# past week")
tgIn = "" # termgraph input
for i in range(7):
    day = (datetime.today() + timedelta(days=i-6)).strftime("%Y-%m-%d")
    daySum = 0
    if day in days:
        for program in days[day]:
            if program != "slock" and program != "standby":
                daySum += days[day][program]
    tgIn += day + "      " + timestring(daySum).rjust(5, " ") + "," + \
            str(daySum) + "\n"
print(runExternal(["termgraph", "--label-before", "--no-values"], tgIn)[1:-2])

today = datetime.today().strftime("%Y-%m-%d")
if today in days:
    print()
    printHeading("# today")
    tgIn = "" # termgraph input
    for program in sorted(days[today], key=lambda x: days[today][x],
            reverse=True):
        if days[today][program] >= 60:
            # 15 is enough space https://stackoverflow.com/questions/23534263/what-is-the-maximum-allowed-limit-on-the-length-of-a-process-name
            tgIn += program.ljust(15, " ") + " " + \
                    timestring(days[today][program]).rjust(5, " ") + "," + \
                    str(days[today][program]) + "\n"
    print(runExternal(["termgraph", "--label-before", "--no-values"],
        tgIn)[1:-2])
